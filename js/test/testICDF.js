/// <reference path="A.js" />
/// <reference path="M0.js" />
/// <reference path="M.js" />
/// <reference path="MT.js" />
/// <reference path="O.js" />
/// <reference path="x.js" />
/// <reference path="NUM.js" />

x2 = {};
x2.A = {};
x2.A.sParameters = new zygotine.M.SEGInformedVarModelParameters(true);
x2.A.mlStr = "< 0.2| [0.40,0.60]| 0.406| 0.597| <0.2| <0.2| <0.2| >0.6| 0.718312913| [0.40,0.60]";
x2.A.ml = new zygotine.M.MeasureList(x2.A.mlStr);
x2.A.mcmcParam = new zygotine.M.McmcParameters.getDefaults();
x2.A.infVar = new zygotine.M.SEGInformedVarModel(x2.A.ml, x2.A.sParameters, x2.A.mcmcParam, zygotine.M.PastDataSummary.emptyPDS);
zygotine.MT.replaceMathRandomFunction(12);
x2.A.results = x2.A.infVar.compute();
zz = new zygotine.S.Quantile();
zzz = zz.compute(x2.A.infVar.result.chains.muSample.data);

x2.B = {};
x2.B.sParameters = new zygotine.M.SEGInformedVarModelParameters(true);
x2.B.mlStr = "0.367|0.612|0.307|0.218|0.636|[0.233,0.524]|0.263|0.263|0.423|0.563|0.275|0.277|0.315|[0.188,0.424]|0.221|0.349|0.721|0.124|0.243|>0.493|0.226|>0.408|0.292|0.243|<0.185|0.276|0.309|0.282|0.534|0.216|0.219|0.35|0.298|0.444|0.314|[0.176,0.396]|0.381|0.253|0.352|<0.141|0.265|0.264|>0.481|0.169|0.282|0.242|0.359|0.283|0.277|0.132|0.534|0.239|0.0941|<0.198|0.246|0.237|0.298|0.496|0.369|0.404|0.312|0.291|0.222|0.263|0.547|0.19|0.264|0.313|0.318|0.165|0.187|0.246|[0.222,0.499]|>0.424|0.356|0.376|0.343|0.477|0.333|0.26|0.251|0.289|<0.216|0.194|>0.417|[0.375,0.845]|0.739|0.361|0.625|0.568|0.272|0.242|0.297|0.144|<0.201|0.257|0.19|0.134|0.259|0.258";
x2.B.ml = new zygotine.M.MeasureList(x2.B.mlStr);
x2.B.mcmcParam = new zygotine.M.McmcParameters.getDefaults();
x2.B.infVar = new zygotine.M.SEGInformedVarModel(x2.B.ml, x2.B.sParameters, x2.B.mcmcParam, zygotine.M.PastDataSummary.emptyPDS);
zygotine.MT.replaceMathRandomFunction(12);
x2.B.results = x2.B.infVar.compute();
zz = new zygotine.S.Quantile();
zzz = zz.compute(x2.B.infVar.result.chains.muSample.data);

//### 100 mesures non censurées
//######## 0.239|0.321|0.371|0.391|0.179|0.291|0.406|0.428|0.268|0.419|0.598|0.218|0.321|0.272|0.295|0.295|0.541|0.204|0.22|0.106|0.541|0.452|0.353|0.51|0.429|0.328|0.24|0.312|0.402|0.209|0.228|0.225|0.222|0.458|0.249|0.168|0.252|0.286|0.347|0.685|0.448|0.255|0.263|0.372|0.165|0.352|0.186|0.262|0.0992|0.251|0.225|0.401|0.322|0.277|0.151|0.479|0.188|0.299|0.537|0.531|0.307|0.726|0.308|0.346|0.256|0.417|0.45|0.525|1.06|0.256|0.509|0.306|0.407|0.263|0.468|0.479|0.243|0.405|0.332|0.324|0.273|0.386|0.164|0.205|0.16|0.585|0.521|0.222|0.294|0.421|0.157|0.333|0.229|0.318|0.322|0.165|0.379|0.349|0.266|0.292
x2.C = {};
x2.C.sParameters = new zygotine.M.SEGInformedVarModelParameters(true);
x2.C.mlStr = "0.239|0.321|0.371|0.391|0.179|0.291|0.406|0.428|0.268|0.419|0.598|0.218|0.321|0.272|0.295|0.295|0.541|0.204|0.22|0.106|0.541|0.452|0.353|0.51|0.429|0.328|0.24|0.312|0.402|0.209|0.228|0.225|0.222|0.458|0.249|0.168|0.252|0.286|0.347|0.685|0.448|0.255|0.263|0.372|0.165|0.352|0.186|0.262|0.0992|0.251|0.225|0.401|0.322|0.277|0.151|0.479|0.188|0.299|0.537|0.531|0.307|0.726|0.308|0.346|0.256|0.417|0.45|0.525|1.06|0.256|0.509|0.306|0.407|0.263|0.468|0.479|0.243|0.405|0.332|0.324|0.273|0.386|0.164|0.205|0.16|0.585|0.521|0.222|0.294|0.421|0.157|0.333|0.229|0.318|0.322|0.165|0.379|0.349|0.266|0.292";
x2.C.ml = new zygotine.M.MeasureList(x2.C.mlStr);
x2.C.mcmcParam = new zygotine.M.McmcParameters.getDefaults();
x2.C.infVar = new zygotine.M.SEGInformedVarModel(x2.C.ml, x2.C.sParameters, x2.C.mcmcParam, zygotine.M.PastDataSummary.emptyPDS);

zygotine.MT.restoreMathRandomFunction();
zygotine.MT.replaceMathRandomFunction(12);

x2.C.results = x2.C.infVar.compute();
zz = new zygotine.S.Quantile();
zzz = zz.compute(x2.C.infVar.result.chains.muSample.data);
//########

//### jeu de 100 mesures fortement censuré  
x2.D = {};
x2.D.sParameters = new zygotine.M.SEGInformedVarModelParameters(true);
x2.D.mlStr = "0.464|<0.0874|0.899|0.116|>4.12|<0.0929|[0.162,0.365]|<0.0529|0.151|0.077|0.363|0.391|<0.103|[0.26,0.585]|0.576|<0.224|[0.213,0.478]|2.05|>4.34|6.18|<0.035|0.147|<0.105|<0.0661|>1.14|<0.174|>1.13|>1.37|[0.123,0.277]|0.0188|<0.194|<0.19|<0.145|<0.27|0.183|<0.227|<0.0824|<0.0961|<0.22|1.7|<0.108|1.35|0.465|<0.143|[0.242,0.545]|<0.167|0.0468|0.814|<0.178|0.0833|<0.0283|0.0441|<0.147|0.071|0.166|0.243|0.247|0.851|>0.899|<0.211|0.409|<0.253|[0.47,1.06]|0.652|[0.162,0.364]|<0.25|<0.106|0.546|<0.209|1.35|<0.0628|0.0686|0.0717|0.665|[0.384,0.864]|[0.127,0.286]|>0.899|<0.116|1.72|0.467|0.351|<0.182|<0.232|<0.0808|<0.127|<0.201|<0.222|<0.0702|[0.317,0.713]|0.112|0.51|<0.199|>1.22|0.139|<0.125|0.665|>1.35|<0.0831|0.86|>1.16";
x2.D.ml = new zygotine.M.MeasureList(x2.D.mlStr);
x2.D.mcmcParam = new zygotine.M.McmcParameters.getDefaults();
x2.D.infVar = new zygotine.M.SEGInformedVarModel(x2.D.ml, x2.D.sParameters, x2.D.mcmcParam, zygotine.M.PastDataSummary.emptyPDS);

zygotine.MT.restoreMathRandomFunction();
zygotine.MT.replaceMathRandomFunction(12);

x2.D.results = x2.D.infVar.compute();
zz = new zygotine.S.Quantile();
zzz = zz.compute(x2.D.infVar.result.chains.muSample.data);
//########




























































































//### jeu de 100 mesures fortement censuré  
// x2 = {}
x2.E = {};
x2.E.sParameters = new zygotine.M.SEGInformedVarModelParameters(false);
x2.E.mlStr = "59.3|89.8|110|68.8|88.9|87.8|64.7|99.1|100|75.2";
x2.E.ml = new zygotine.M.MeasureList(x2.E.mlStr);
x2.E.mcmcParam = new zygotine.M.McmcParameters.getDefaults();
x2.E.infVar = new zygotine.M.SEGInformedVarModel(x2.E.ml, x2.E.sParameters, x2.E.mcmcParam, zygotine.M.PastDataSummary.emptyPDS);

zygotine.MT.restoreMathRandomFunction();
zygotine.MT.replaceMathRandomFunction(12);

x2.E.results = x2.E.infVar.compute();
zz = new zygotine.S.Quantile();
zzz = zz.compute(x2.E.infVar.result.chains.muSample.data);
//########


//0.367|0.612|0.307|0.218|0.636|[0.233,0.524]|0.263|0.263|0.423|0.563|0.275|0.277|0.315|[0.188,0.424]|0.221|0.349|0.721|0.124|0.243|>0.493|0.226|>0.408|0.292|0.243|<0.185|0.276|0.309|0.282|0.534|0.216|0.219|0.35|0.298|0.444|0.314|[0.176,0.396]|0.381|0.253|0.352|<0.141|0.265|0.264|>0.481|0.169|0.282|0.242|0.359|0.283|0.277|0.132|0.534|0.239|0.0941|<0.198|0.246|0.237|0.298|0.496|0.369|0.404|0.312|0.291|0.222|0.263|0.547|0.19|0.264|0.313|0.318|0.165|0.187|0.246|[0.222,0.499]|>0.424|0.356|0.376|0.343|0.477|0.333|0.26|0.251|0.289|<0.216|0.194|>0.417|[0.375,0.845]|0.739|0.361|0.625|0.568|0.272|0.242|0.297|0.144|<0.201|0.257|0.19|0.134|0.259|0.258;10","0.613|0.418|<0.219|0.226|<0.216|0.115|0.326|>0.423|[0.264,0.594]|0.184|0.295|0.349|0.341|0.107|[0.127,0.286]|0.459|[0.195,0.439]|0.285|<0.265|0.331|0.199|0.222|0.502|[0.194,0.437]|>0.379|0.336|<0.253|[0.217,0.488]|<0.166|0.177|<0.249|0.696|<0.204|[0.191,0.429]|0.693|0.174|<0.261|0.568|<0.255|0.417|0.303|<0.231|>0.374|>0.462|>0.374|0.409|>0.406|0.0958|0.204|<0.16|<0.261|[0.18,0.406]|0.31|0.144|0.172|[0.197,0.443]|0.319|[0.151,0.339]|0.545|<0.224|0.176|0.56|<0.144|0.312|0.174|[0.217,0.489]|>0.409|[0.236,0.531]|0.231|<0.172|>0.373|0.238|[0.208,0.468]|<0.264|[0.128,0.287]|[0.126,0.283]|>0.464|0.271|<0.258|<0.214|<0.221|[0.174,0.392]|0.325|0.192|[0.157,0.353]|[0.247,0.557]|0.207|<0.258|0.28|0.238|0.235|[0.269,0.605]|0.261|0.454|[0.18,0.405]|>0.381|0.27|[0.153,0.344]|0.326|0.354;10","0.643|0.0429|0.519|0.0833|0.238|0.167|1.31|[0.633,1.42]|0.611|0.0561|1.28|0.515|1.18|0.13|0.246|0.358|1.34|0.118|0.979|0.651|0.502|1.41|>1.19|0.122|0.317|0.0899|0.0967|0.0114|0.227|0.139|>2.65|0.782|<0.0171|0.128|<0.0303|0.785|0.0233|0.301|0.167|0.0497|1.04|[0.269,0.605]|<0.0368|1.52|0.0191|>1.1|0.191|0.141|0.0655|0.345|0.236|0.203|<0.0286|0.171|0.0827|[0.346,0.778]|0.222|0.265|>1.3|0.0462|0.353|2.18|0.0249|1.18|0.953|0.0699|0.288|>1.45|1.04|0.0921|<0.0349|0.0531|0.12|0.0544|0.188|0.0763|0.798|0.772|0.798|0.939|0.462|3.98|0.174|0.0588|0.242|1.95|0.701|0.357|1.65|0.8|0.102|0.688|0.104|0.881|0.209|0.949|[0.0799,0.18]|0.126|[0.515,1.16]|0.312;10","[0.166,0.374]|11.7|0.0465|0.121|0.649|[0.283,0.638]|0.693|>1.19|<0.0743|1.84|[0.0916,0.206]|1.11|0.0981|>7.82|<0.174|>3.89|[0.424,0.955]|0.0534|<0.188|1.04|<0.035|1.42|1.7|0.425|0.178|0.168|[0.0885,0.199]|<0.0476|0.139|2.42|<0.182|<0.0764|0.255|0.719|0.109|0.0499|0.126|0.116|<0.105|<0.047|0.333|[0.219,0.493]|0.637|<0.173|[0.502,1.13]|[0.432,0.973]|>1.23|1.92|0.125|<0.164|>1.28|<0.129|0.0509|<0.0698|0.14|0.115|[0.51,1.15]|[0.479,1.08]|>4.22|0.766|>1.6|[0.0934,0.21]|<0.0748|>1.73|0.287|0.22|1.21|0.0254|0.468|[0.253,0.569]|0.415|<0.0493|>1.13|<0.158|0.105|0.294|[0.122,0.274]|[0.113,0.254]|[0.308,0.693]|0.462|5.84|<0.0801|0.628|<0.0381|[0.19,0.427]|6.33|0.285|0.131|1.78|[0.0866,0.195]|<0.147|0.334|0.329|0.185|>1.61|0.0329|[0.223,0.501]|<0.101|[0.154,0.347]|[0.462,1.04];10",">0.349|0.274|0.273|0.285|<0.296|0.252|[0.19,0.427]|0.404|0.359|0.289;10",">0.483|<0.348|0.318|<0.292|[0.186,0.418]|0.279|0.251|[0.278,0.625]|0.724|0.232;10",">0.735|0.479|[0.163,0.366]|<0.175|1.03|0.132|0.117|1.1|0.435|0.244;10","<0.0444|2.45|0.112|[0.0745,0.168]|1.71|>1.63|[0.277,0.622]|0.266|0.112|<0.167";




x2 = {};
x2.sParameters = new zygotine.M.SEGInformedVarModelParameters(true);
x2.mlStr = "< 0.2| [0.40,0.60]| 0.406| 0.597| <0.2| <0.2| <0.2| >0.6| 0.718312913| [0.40,0.60]";
x2.ml = new zygotine.M.MeasureList(x2.mlStr);
x2.mcmcParam = new zygotine.M.McmcParameters.getDefaults();
x2.infVar = new zygotine.M.SEGInformedVarModel(x2.ml, x2.sParameters, x2.mcmcParam, zygotine.M.PastDataSummary.emptyPDS);


//  < 0.2| [0.40,0.60]| 0.406| 0.597| <0.2| <0.2| <0.2| >0.6| 0.718312913| [0.40,0.60]
/* xy = NULL
set.generator("MersenneTwister", initialization = "init2002", resolution = 32, seed = 1993819937)
nTest <- nTest + 1
fileName <- sprintf(fileNameFmt, nTest)
RData <- list()
RData$WorkerInfoComplete <- F
RData$Uncensored$values <-c(0.406, 0.597, 0.718312913)
RData$Uncensored$worker <-c(NA, NA, NA)
RData$RightCensored$values <-c(0.2, 0.2, 0.2, 0.2)
RData$RightCensored$worker <-c(NA, NA, NA, NA)
RData$LeftCensored$values <-c(0.6)
RData$LeftCensored$worker <-c(NA)
RData$IntervalCensored$left$values <- c(0.4, 0.4)
RData$IntervalCensored$right$values <- c(0.6, 0.6)
RData$IntervalCensored$worker <- c(NA, NA)

mcgill.out <- model.Kromhout(y=RData$Uncensored$values, lt=RData$RightCensored$values, gt=RData$LeftCensored$values, interval.lower=RData$IntervalCensored$left$values, interval.upper=RData$IntervalCensored$right$values)
*/
